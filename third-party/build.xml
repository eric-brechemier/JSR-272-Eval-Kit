<?xml version="1.0" encoding="UTF-8"?>
<!--
==================================================================
 JSR 272 Mobile TV API -Evaluation Pack-
 https://github.com/eric-brechemier/JSR-272-Eval-Kit
 
 Copyright (c) 2007 Eric Bréchemier <jsr272@eric.brechemier.name>
 Licensed under BSD License and/or MIT License.
==================================================================

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                         BSD License
                             ~~~
             http://creativecommons.org/licenses/BSD/
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                            MIT License
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  Copyright (c) 2007 Eric Bréchemier <jsr272@eric.brechemier.name>
  
  Permission is hereby granted, free of charge, to any person
  obtaining a copy of this software and associated documentation
  files (the "Software"), to deal in the Software without
  restriction, including without limitation the rights to use,
  copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following
  conditions:

  The above copyright notice and this permission notice shall be
  included in all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
  OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
  HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
  WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-->
<project name="jsr272.eval().third.party" default="deploy-all" basedir=".">
  <!--
  JSR 272 Eval Kit - Build file to download third party libraries from mirrors
  
  Author: Eric Bréchemier
  Version: 1.3
  
  History:
    1.0 - File Creation [Nov 23, 2007]
    1.1 - Added JXTA and Jadabs for log4j adaptations to J2ME [Nov 28, 2007]
    1.2 - Modified build to deploy local files (release mode) [Dec 5, 2007]
    1.3 - Added Saxon and Sun MSV [Jan 02, 2008], fixed [Nov 20, 2010]
    
  List of Third Party Modules:
    
    * MicroEmulator - "a pure Java implementation of J2ME in J2SE."
      http://www.microemu.org
    
    * "JUnit 4.1 Brought to you by Kent Beck, Erich Gamma, and David Saff."
      http://www.junit.org/
    
    * JXTA log4jstub
      "JXTA technology is a set of open protocols that enable any connected
      device on the network, ranging from cell phones and wireless PDAs to PCs
      and servers, to communicate and collaborate in a P2P manner. "
      "This product includes software developed by the Sun Microsystems, Inc.
      for Project JXTA."
      https://jxta.dev.java.net/
    
    * Jadabs log4j-j2me LogCanvas
      "Jadabs is a dynamic lightweight container for small devices 
       in a distributed environment" 
      http://jadabs.berlios.de/
      https://developer.berlios.de/projects/jadabs
      http://jadabs.berlios.de/jadabs-cldc/multiproject/log4j-j2me/index.html
      http://jadabs.berlios.de/jadabs-cldc/multiproject/log4j-j2me/apidocs/index.html
      
    * "The Saxon XSLT and XQuery Processor from Saxonica Limited"
      Author: Michael H. Kay
      http://www.saxonica.com/
    
    * Sun Multi-Schema Validator
      "The Sun Multi-Schema XML Validator (MSV) is a Java technology tool to
      validate XML documents against several kinds of XML schemata. It supports
      RELAX NG, RELAX Namespace, RELAX Core, TREX, XML DTDs, and a subset of
      XML Schema Part 1."
      Author: Kohsuke KAWAGUCHI
      https://msv.dev.java.net/
  
  TODO: Import CLDCUnit and replace JUnit libraries with CLDCUnit in ./lib
  TODO: Create Util class deriving from java.io.PrintStream to redirect System.err/System.out to LogCanvas
        This can be used in combination with log4jstub to actually print to LogCanvas
  -->
  
  <property file="build.properties" />
    <!-- default values for properties missing in property file -->
      <!-- MicroEmulator -->
    <property name="microemu.mirror.name" value="heanet" />
    <property name="microemu.version" value="2.0.1" />
    <property name="microemu.archive.name" value="microemulator-${microemu.version}.tar.gz" />
    <property name="microemu.archive.prefix" value="microemulator-${microemu.version}" />
    <property name="microemu.download.url" value="http://${microemu.mirror.name}.dl.sourceforge.net/sourceforge/microemulator/${microemu.archive.name}" />
    <property name="microemu.license.name" value="LICENSE" />
      <!-- JUnit -->
    <property name="junit.mirror.name" value="heanet" />
    <property name="junit.version" value="4.1" />
    <property name="junit.zip.name" value="junit${junit.version}.zip" />
    <property name="junit.zip.prefix" value="junit${junit.version}" />
    <property name="junit.download.url" value="http://${junit.mirror.name}.dl.sourceforge.net/sourceforge/junit/${junit.zip.name}" />
    <property name="junit.license.name" value="cpl-v10.html" />
      <!-- Saxon -->
    <property name="saxon.mirror.name" value="heanet" />
    <property name="saxon.version" value="b9-0-0-2j" />
    <property name="saxon.zip.name" value="saxon${saxon.version}.zip" />
    <property name="saxon.zip.prefix" value="saxon${saxon.version}" />
    <property name="saxon.download.url" value="http://${saxon.mirror.name}.dl.sourceforge.net/sourceforge/saxon/${saxon.zip.name}" />
    <property name="saxon.license.url" value="http://www.saxonica.com/documentation/conditions/intro.html" />
    <property name="saxon.license.other.url" value="http://www.saxonica.com/documentation/conditions/third-party-components.html" />
      <!-- Sun MSV -->
    <property name="msv.version" value="20070407" />
    <property name="msv.zip.name" value="msv.${msv.version}.zip" />
    <property name="msv.file.release" value="54787" />
    <property name="msv.zip.prefix" value="msv-${msv.version}" />
    <property name="msv.download.url" value="msv.download.url=https://msv.dev.java.net/files/documents/61/${msv.file.release}/${msv.zip.name}" />
    <property name="msv.license.name" value="license.txt" />
    <property name="msv.license.other.name" value="Apache-LICENSE-1.1.txt" />
      <!-- JXTA log4jstub -->
    <property name="jxta.version" value="2.4.1" />
    <property name="jxta.archive.name" value="jxta-src-${jxta.version}.tar.gz" />
    <property name="jxta.archive.prefix" value="jxta-src-${jxta.version}" />
    <property name="jxta.download.url" value="http://download.java.net/jxta/jxta-jxse/${jxta.version}/${jxta.archive.name}" />
    <property name="jxta.license.name" value="log4jstub.jxta.license.txt" />
      <!-- Jadabs log4j-J2me LogCanvas -->
    <!-- ... ongoing -->
    <property name="logcanvas.download.url" value="http://cvs.berlios.de/cgi-bin/viewcvs.cgi/*checkout*/jadabs/jadabs-cldc/bundles/log4j-j2me/src/org/apache/log4j/LogCanvas.java?rev=1.1" />
    <property name="logcanvas.license.name" value="logcanvas.jadabs.license.txt" />
    
  <property name="download.dir" location="download" />
  <property name="bin.dir" location="bin" />
  <property name="lib.dir" location="lib" />
  <property name="res.dir" location="res" />
  
  <!-- Local Location of MicroEmulator files -->
  <property name="microemu.archive.location" location="${download.dir}/${microemu.archive.name}" />
  <property name="microemu.lib.location" location="${lib.dir}/microemulator.jar" />
  <property name="microemu.license.location" location="${lib.dir}/microemu.license.txt" />
  
  <!-- Local Location of JUnit files -->
  <property name="junit.zip.location" location="${download.dir}/${junit.zip.name}" />
  <property name="junit.lib.location" location="${lib.dir}/junit-${junit.version}.jar" />
  <property name="junit.license.location" location="${lib.dir}/junit.license.html" />
  
  <!-- Local Location of Saxon files -->
  <property name="saxon.zip.location" location="${download.dir}/${saxon.zip.name}" />
  <property name="saxon.lib.location" location="${lib.dir}/saxon9.jar" />
  <property name="saxon.license.location" location="${lib.dir}/saxon9.license.html" />
  <property name="saxon.license.other.location" location="${lib.dir}/saxon9.license.other.html" />
  
  <!-- Local Location of Sun MSV files -->
  <property name="msv.zip.location" location="${download.dir}/${msv.zip.name}" />
  <property name="msv.lib.location" location="${lib.dir}/msv.jar" />
  <property name="msv.license.location" location="${lib.dir}/msv.license.txt" />
  <property name="msv.license.other.location" location="${lib.dir}/msv.license.other.txt" />
  
  <!-- Local Location of JXTA log4jstub files -->
  <property name="jxta.archive.location" location="${download.dir}/${jxta.archive.name}" />
  <property name="jxta.license.location" location="${lib.dir}/log4jstub.jxta.license.txt" />
  <property name="jxta.lib.name" value="log4jstub.jxta-${jxta.version}.jar" />
  <property name="jxta.lib.location" location="${lib.dir}/${jxta.lib.name}" />
  
  <!-- Local Location of Jadabs-Log4j-J2me LogCanvas files -->
  <property name="logcanvas.parent.dir.location" location="${bin.dir}/${jadabs.project.name}/${logcanvas.parent.path}" />
  <property name="logcanvas.file.location" location="${logcanvas.parent.dir.location}/${logcanvas.file.name}" />
  <property name="logcanvas.license.location" location="${lib.dir}/logcanvas.jadabs.license.txt" />
  <property name="logcanvas.lib.name" value="logcanvas-${jadabs.version.tag}.jar" />
  <property name="logcanvas.lib.location" location="${lib.dir}/${logcanvas.lib.name}" />
  
  <target name="clean" description="Clean up output directories">
    <delete dir="${lib.dir}" />
    <delete dir="${bin.dir}" />
    <delete dir="${download.dir}" />
  </target>
  
  <target name="init">  
    <mkdir dir="${lib.dir}" />
    <mkdir dir="${bin.dir}" />
    <mkdir dir="${download.dir}" />
  </target>
  
  <!-- Targets for MicroEmulator -->
  
  <target name="isMicroemuCached">
    <condition property="microemuCached">
      <and>
        <available file="${microemu.archive.location}"/>
      </and>
    </condition>
  </target>
  
  <target name="get-microemu" depends="init, isMicroemuCached" unless="microemuCached" 
    description="Get MicroEmulator"
  >
    <get src="${microemu.download.url}" dest="${microemu.archive.location}"
      verbose="true" usetimestamp="true" ignoreerrors="true"
    />
  </target>
  
  <target name="isMicroemuDeployed">
    <condition property="microemuDeployed">
      <and>
        <available file="${microemu.lib.location}"/>
        <available file="${microemu.license.location}"/>
      </and>
    </condition>
  </target>
  
  <target name="deploy-microemu" depends="init, get-microemu, isMicroemuDeployed" unless="microemuDeployed" 
    description="Deploy MicroEmulator"
  >
    <untar compression="gzip" src="${microemu.archive.location}" dest="${bin.dir}" overwrite="false"/>
    <copy todir="${lib.dir}" verbose="true">
      <fileset dir="${bin.dir}/${microemu.archive.prefix}">
        <include name="*.jar"/>
        <exclude name="*-sources.jar"/>
      </fileset>
    </copy>
    <copy file="${bin.dir}/${microemu.archive.prefix}/${microemu.license.name}" tofile="${microemu.license.location}" verbose="true" />
  </target>
  
  <!-- Targets for JUnit -->
  
  <target name="isJUnitCached">  
    <condition property="junitCached">
      <and>
        <available file="${junit.zip.location}"/>
      </and>
    </condition>
  </target>
  
  <target name="get-junit" depends="init, isJUnitCached" unless="junitCached" 
    description="Get JUnit"
  >
    <get src="${junit.download.url}" dest="${junit.zip.location}"
      verbose="true" usetimestamp="true" ignoreerrors="true"
    />
  </target>
  
  <target name="isJUnitDeployed">  
    <condition property="junitDeployed">
      <and>
        <available file="${junit.lib.location}"/>
        <available file="${junit.license.location}"/>
      </and>
    </condition>
  </target>
  
  <target name="deploy-junit" depends="init, get-junit, isJUnitDeployed" unless="junitDeployed" 
    description="Deploy JUnit"
  >
    <unzip src="${junit.zip.location}" dest="${bin.dir}" overwrite="false" />
    <copy todir="${lib.dir}" verbose="true">
      <fileset dir="${bin.dir}/${junit.zip.prefix}">
        <include name="*.jar"/>
        <exclude name="*-src.jar"/>
      </fileset>
    </copy>
    <copy file="${bin.dir}/${junit.zip.prefix}/${junit.license.name}" tofile="${junit.license.location}" verbose="true" />
  </target>
  
  <!-- Targets for Saxon -->
  
  <target name="isSaxonCached">  
    <condition property="saxonCached">
      <and>
        <available file="${saxon.zip.location}"/>
        <available file="${saxon.license.location}"/>
        <available file="${saxon.license.other.location}"/>
      </and>
    </condition>
  </target>
  
  <target name="get-saxon" depends="init, isSaxonCached" unless="saxonCached" 
    description="Get Saxon-B XSLT Processor"
  >
    <get src="${saxon.download.url}" dest="${saxon.zip.location}"
      verbose="true" usetimestamp="true" ignoreerrors="true"
    />
    <get src="${saxon.license.url}" dest="${saxon.license.location}"
      verbose="true" usetimestamp="true" ignoreerrors="true"
    />
    <get src="${saxon.license.other.url}" dest="${saxon.license.other.location}"
      verbose="true" usetimestamp="true" ignoreerrors="true"
    />
  </target>
  
  <target name="isSaxonDeployed">  
    <condition property="saxonDeployed">
      <and>
        <available file="${saxon.lib.location}"/>
        <available file="${saxon.license.location}"/>
        <available file="${saxon.license.other.location}"/>
      </and>
    </condition>
  </target>
  
  <target name="deploy-saxon" depends="init, get-saxon, isSaxonDeployed" unless="saxonDeployed" 
    description="Deploy Saxon"
  >
    <unzip src="${saxon.zip.location}" dest="${lib.dir}" overwrite="false" />
  </target>
  
  <!-- Targets for Sun MSV -->
  
  <target name="isMSVCached">
    <condition property="msvCached">
      <and>
        <available file="${msv.archive.location}"/>
      </and>
    </condition>
  </target>
  
  <target name="get-msv" depends="init, isMSVCached" unless="msvCached" 
    description="Get Sun MSV"
  >
    <get src="${msv.download.url}" dest="${msv.zip.location}"
      verbose="true" usetimestamp="true" ignoreerrors="true"
    />
  </target>
  
  <target name="isMSVDeployed">
    <condition property="msvDeployed">
      <and>
        <available file="${msv.lib.location}"/>
        <available file="${msv.license.location}"/>
        <available file="${msv.license.other.location}"/>
      </and>
    </condition>
  </target>
  
  <target name="deploy-msv" depends="init, get-msv, isMSVDeployed" unless="msvDeployed" 
    description="Deploy Sun MSV"
  >
    <unzip src="${msv.zip.location}" dest="${bin.dir}" overwrite="false" />
    <copy todir="${lib.dir}" verbose="true">
      <globmapper from="*.jar" to="msv.*.jar" />
      <fileset dir="${bin.dir}/${msv.zip.prefix}">
        <include name="*.jar"/>
        <exclude name="*-src.jar"/>
      </fileset>
    </copy>
    <copy verbose="true" 
      file="${bin.dir}/${msv.zip.prefix}/${msv.license.name}" tofile="${msv.license.location}" 
    />
    <copy verbose="true" 
      file="${bin.dir}/${msv.zip.prefix}/${msv.license.other.name}" tofile="${msv.license.other.location}" 
    />
  </target>
  
  <!-- Targets for JXTA log4jstub -->
  
  <target name="isJXTACached">
    <condition property="jxtaCached">
      <and>
        <available file="${jxta.archive.location}"/>
      </and>
    </condition>
  </target>
  
  <target name="get-jxta" depends="init, isJXTACached" unless="jxtaCached" 
    description="Get JXTA log4jstub"
  >
    <get src="${jxta.download.url}" dest="${jxta.archive.location}"
      verbose="true" usetimestamp="true" ignoreerrors="true"
    />
  </target>
  
  <target name="isJXTADeployed">
    <condition property="jxtaDeployed">
      <and>
        <available file="${jxta.lib.location}"/>
        <available file="${jxta.license.location}"/>
      </and>
    </condition>
  </target>
  
  <target name="deploy-jxta" depends="init, get-jxta, isJXTADeployed" unless="jxtaDeployed" 
    description="Deploy JXTA log4jstub"
  >
    <untar compression="gzip" src="${jxta.archive.location}" dest="${bin.dir}" overwrite="false"/>
    
    <!-- (inlined below) Build for log4jstub -->
    <property name="log4jstub.dir.location" location="${bin.dir}/${jxta.archive.prefix}/log4jstub" />
    <property name="log4jstub.src.location" location="${log4jstub.dir.location}" />
    <property name="log4jstub.class.location" location="${log4jstub.dir.location}/class" />
    <property name="log4jstub.lib.location" location="${log4jstub.dir.location}/lib" />
    <property name="log4jstub.lib.file.location" location="${log4jstub.lib.location}/${jxta.lib.name}" />
    
    <mkdir dir="${log4jstub.class.location}" />
    <javac srcdir="${log4jstub.src.location}" destdir="${log4jstub.class.location}" />
    <mkdir dir="${log4jstub.lib.location}" />
    <jar destfile="${log4jstub.lib.file.location}" basedir="${log4jstub.class.location}">
      <manifest>
        <attribute name="Built-By" value="jsr272@eric.brechemier.name"/>
      </manifest>
    </jar>
    <copy file="${log4jstub.lib.file.location}" tofile="${jxta.lib.location}" verbose="true"/>
    <copy file="${res.dir}/${jxta.license.name}" tofile="${jxta.license.location}" verbose="true" />
  </target>
  
  <!-- Targets for Jadabs logcanvas -->
  
  <target name="isLogCanvasCached">
    <condition property="logCanvasCached">
      <and>
        <available file="${logcanvas.file.location}"/>
      </and>
    </condition>
  </target>
  
  <target name="get-LogCanvas" depends="init, isLogCanvasCached" unless="logCanvasCached" 
    description="Get Jadabs-Log4j-J2ME LogCanvas"
  >
    <mkdir dir="${logcanvas.parent.dir.location}" />
    <get src="${logcanvas.download.url}" dest="${logcanvas.file.location}"
      verbose="true" usetimestamp="true" ignoreerrors="true"
    />
  </target>
  
  <target name="isLogCanvasDeployed">
    <condition property="logCanvasDeployed">
      <and>
        <available file="${logcanvas.lib.location}"/>
        <available file="${logcanvas.license.location}"/>
      </and>
    </condition>
  </target>
  
  <target name="deploy-LogCanvas" depends="init, deploy-microemu, get-LogCanvas, isLogCanvasDeployed" unless="logCanvasCached" 
    description="Deploy Jadabs-Log4j-J2ME LogCanvas">
    <!-- (inlined below) Build for LogCanvas -->
    <property name="logcanvas.dir.location" location="${bin.dir}/${jadabs.project.name}" />
    <property name="logcanvas.src.location" location="${logcanvas.dir.location}/src" />
    <property name="logcanvas.class.location" location="${logcanvas.dir.location}/class" />
    <property name="logcanvas.lib.location" location="${logcanvas.dir.location}/lib" />
    <property name="logcanvas.lib.file.location" location="${logcanvas.lib.location}/${logcanvas.lib.name}" />
    
    <mkdir dir="${logcanvas.class.location}" />
    <javac srcdir="${logcanvas.src.location}" destdir="${logcanvas.class.location}">
      <classpath>
        <fileset dir="${lib.dir}">
          <include name="**/*.jar"/>
        </fileset>
      </classpath>
    </javac>
    
    <mkdir dir="${logcanvas.lib.location}" />
    <jar destfile="${logcanvas.lib.file.location}" basedir="${logcanvas.class.location}">
      <manifest>
        <attribute name="Built-By" value="jsr272@eric.brechemier.name"/>
      </manifest>
    </jar>
    
    <copy file="${logcanvas.lib.file.location}" tofile="${logcanvas.lib.location}" verbose="true"/>
    <copy file="${res.dir}/${logcanvas.license.name}" tofile="${logcanvas.license.location}" verbose="true" />
  </target>
  
  
  <!-- Main Target -->
  
  <target name="deploy-all" depends="deploy-microemu, deploy-junit, deploy-msv, deploy-saxon, deploy-jxta, deploy-LogCanvas" description="Deploy all third party components" />
  
</project>
